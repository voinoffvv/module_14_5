import crud_functions

from random import Random
import aiogram.utils.markdown
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import markdown
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

import crud_functions as crud

api = 'token'
bot = Bot(token=api)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
start_flag = False

crud.initiate_db()
all_products = crud.get_all_products()

kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏'),
         KeyboardButton(text='üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')],
        [KeyboardButton(text='–ö—É–ø–∏—Ç—å')],
        [KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')]
    ],
    resize_keyboard=True
)

catalog_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç1', callback_data='product_buying'),
            InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç2', callback_data='product_buying'),
            InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç3', callback_data='product_buying'),
            InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç4', callback_data='product_buying')
        ]
    ]
)

main_menu1 = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories'),
            InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
        ]
    ]
)




####################################################        RegistrationState              ###########################
class RegistrationState(StatesGroup):
    age = State()
    username = State()
    email = State()
    balance = State()

@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):')
    await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state):
    if crud_functions.is_included(message.text):
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:')
        await RegistrationState.username.set()
    else:
        await state.update_data(username = message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:')
        await RegistrationState.email.set()

@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state):
    await state.update_data(email = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await RegistrationState.age.set()

@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state):
    await state.update_data(age = message.text)

    data = await state.get_data()
    crud_functions.add_user(data['username'], data['email'], data['age'])
    await state.finish()

    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')










####################################################        UserState              ###########################
class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏')
async def main_menu(message: types.Message):
    global start_flag
    if not start_flag:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=main_menu1)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('–¥–ª—è –º—É–∂—á–∏–Ω: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5')
    await call.message.answer('–¥–ª—è –∂–µ–Ω—â–∏–Ω: 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161')
    await call.answer()


@dp.callback_query_handler(text='calories')
async def set_age(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):')
    await UserState.age.set()
    await call.answer()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)

    data = await state.get_data()
    try:
        res = 10 * int(data['weight']) + 6.25 * int(data['growth']) - 5 * int(data['age'])
        await message.answer(f"–ö–∞–ª–æ—Ä–∏–∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω {res - 161} –∫–∫–∞–ª")
        await message.answer(f"–ö–∞–ª–æ—Ä–∏–∏ –¥–ª—è –º—É–∂—á–∏–Ω {res + 5} –∫–∫–∞–ª")
    except:
        await message.answer(f"–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    await state.finish()


@dp.message_handler(commands='start')
async def start_message(message: types.Message):
    global start_flag
    start_flag = True
    msg = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ωo–ø–∫—É –†–∞—Å—Å—á–∏—Ç–∞—Ç—å.'
    await message.answer(msg, reply_markup=kb)


@dp.message_handler(text='üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def send_information(message, state):
    await message.answer(
        '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω.')
    await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –†–∞—Å—Å—á–∏—Ç–∞—Ç—å')


@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message: types.Message):
    for row in all_products:
        i = 1
        try:
            await message.answer_photo(row[4], f'–ù–∞–∑–≤–∞–Ω–∏–µ: {row[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {row[2]} | –¶–µ–Ω–∞: {row[3]}')
            i = i + 1
        except Exception as err:
            print(err)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=catalog_kb)


@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!')
    await call.answer()


@dp.message_handler()
async def all_messages(message: types.Message):
    global start_flag
    if not start_flag: await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
